AC_INIT(src/libkv.h)
AC_CONFIG_AUX_DIR(ac)
AM_INIT_AUTOMAKE(libkv, 0.0.1)
AC_CONFIG_HEADER(config.h)


CFLAGS="-g -Wall $CFLAGS"
AC_SUBST(CFLAGS)
AC_PROG_CC

CXXFLAGS="-g -Wall $CXXFLAGS"
AC_SUBST(CFLAGS)
AC_PROG_CXX


####
## Tokyo Cabinet
##
AC_ARG_WITH([tc],
	AS_HELP_STRING([--with-tc@<:@=DIR@:>@],
				   [Tokyo Cabinet]),
	[tc_path="$withval"], [])
if test "$tc_path" != ""; then
	CXXFLAGS="$CXXFLAGS -I$tc_path/include"
	CFLAGS="$CFLAGS -I$tc_path/include"
	LDFLAGS="$LDFLAGS -L$tc_path/lib"
fi

use_tchdb="yes"
AC_MSG_CHECKING([if tchdb is enabled])
AC_ARG_ENABLE(tchdb,
	AS_HELP_STRING([--disable-tchdb],
				   [disble tchdb support]) )
if test "$enable_tchdb" == "no"; then
	use_tchdb="no"
else
	AC_CHECK_HEADERS(tchdb.h,,
		AC_MSG_ERROR([Can't find tokyo cabinet header]))
	AC_CHECK_LIB(tokyocabinet,tchdbget,,
		AC_MSG_ERROR([Can't find tokyocabinet library]))
fi
AC_MSG_RESULT($enable_tchdb)
AM_CONDITIONAL(USE_TCHDB, test "$use_tchdb" = "yes")


####
## Tokyo Tyrant
##
AC_ARG_WITH([tt],
	AS_HELP_STRING([--with-tt@<:@=DIR@:>@],
				   [Tokyo Tyrant]),
	[tc_path="$withval"], [])
if test "$tc_path" != ""; then
	CXXFLAGS="$CXXFLAGS -I$tc_path/include"
	CFLAGS="$CFLAGS -I$tc_path/include"
	LDFLAGS="$LDFLAGS -L$tc_path/lib"
fi

use_tcrdb="yes"
AC_MSG_CHECKING([if tcrdb is enabled])
AC_ARG_ENABLE(tcrdb,
	AS_HELP_STRING([--disable-tcrdb],
				   [disable tcrdb support]) )
if test "$enable_tcrdb" == "no"; then
	use_tcrdb="no"
else
	AC_CHECK_HEADERS(tcrdb.h,,
		AC_MSG_ERROR([Can't find tokyo tyrant header]))
	AC_CHECK_LIB(tokyotyrant,tcrdbget,,
		AC_MSG_ERROR([Can't find tokyotyrant library]))
fi
AC_MSG_RESULT($enable_tcrdb)
AM_CONDITIONAL(USE_TCRDB, test "$use_tcrdb" = "yes")


####
## libmemcached
##
AC_ARG_WITH([libmemcached],
	AS_HELP_STRING([--with-libmemcached@<:@=DIR@:>@],
				   [libmemcached]),
	[libmemcached_path="$withval"], [])
if test "$libmemcached_path" != ""; then
	CXXFLAGS="$CXXFLAGS -I$libmemcached_path/include"
	CFLAGS="$CFLAGS -I$libmemcached_path/include"
	LDFLAGS="$LDFLAGS -L$libmemcached_path/lib"
fi

use_libmemcached="yes"
AC_MSG_CHECKING([if libmemcached is enabled])
AC_ARG_ENABLE(libmemcached,
	AS_HELP_STRING([--disable-libmemcached],
				   [disable libmemcached support]) )
if test "$enable_libmemcached" == "no"; then
	use_libmemcached="no"
else
	AC_CHECK_HEADERS(libmemcached/memcached.h,,
		AC_MSG_ERROR([Can't find libmemcached header]))
	AC_CHECK_LIB(memcached,memcached_create,,
		AC_MSG_ERROR([Can't find libmemcached library]))
fi
AC_MSG_RESULT($enable_libmemcached)
AM_CONDITIONAL(USE_LIBMEMCACHED, test "$use_libmemcached" = "yes")


AC_PROG_LIBTOOL
AM_PROG_AS
AM_PROG_CC_C_O


AC_OUTPUT([
		   src/Makefile
		   Makefile])

