AC_INIT(src/libkv.h)
AC_CONFIG_AUX_DIR(ac)
AM_INIT_AUTOMAKE(libkv, 0.0.1)
AC_CONFIG_HEADER(config.h)


CFLAGS="-g -Wall $CFLAGS"
AC_SUBST(CFLAGS)
AC_PROG_CC

CXXFLAGS="-g -Wall $CXXFLAGS"
AC_SUBST(CFLAGS)
AC_PROG_CXX


####
## Tokyo Cabinet
##
AC_ARG_WITH([tc],
	AS_HELP_STRING([--with-tc@<:@=DIR@:>@],
				   [the install directory of Tokyo Cabinet]),
	[tc_path="$withval"], [])
if test "$tc_path" != ""; then
	CXXFLAGS="$CXXFLAGS -I$tc_path/include"
	CFLAGS="$CFLAGS -I$tc_path/include"
	LDFLAGS="$LDFLAGS -L$tc_path/lib"
fi

use_tc="yes"
AC_MSG_CHECKING([if Tokyo Cabinet is enabled])
AC_ARG_ENABLE(tc,
	AS_HELP_STRING([--disable-tc],
				   [disble Tokyo Cabinet support]) )
if test "$enable_tc" == "no"; then
	use_tc="no"
else
	AC_CHECK_HEADERS(tcadb.h,,
		AC_MSG_ERROR([Can't find tokyo cabinet header]))
	AC_CHECK_LIB(tokyocabinet,tcadbget,,
		AC_MSG_ERROR([Can't find tokyocabinet library]))
fi
AC_MSG_RESULT($enable_tc)
AM_CONDITIONAL(USE_TC, test "$use_tc" = "yes")


####
## Tokyo Tyrant
##
AC_ARG_WITH([tt],
	AS_HELP_STRING([--with-tt@<:@=DIR@:>@],
				   [the install directory of Tokyo Tyrant]),
	[tc_path="$withval"], [])
if test "$tc_path" != ""; then
	CXXFLAGS="$CXXFLAGS -I$tc_path/include"
	CFLAGS="$CFLAGS -I$tc_path/include"
	LDFLAGS="$LDFLAGS -L$tc_path/lib"
fi

use_tt="yes"
AC_MSG_CHECKING([if Tokyo Tyrant is enabled])
AC_ARG_ENABLE(tt,
	AS_HELP_STRING([--disable-tt],
				   [disable Tokyo Tyrant support]) )
if test "$enable_tt" == "no"; then
	use_tt="no"
else
	AC_CHECK_HEADERS(tcrdb.h,,
		AC_MSG_ERROR([Can't find tokyo tyrant header]))
	AC_CHECK_LIB(tokyotyrant,tcrdbget,,
		AC_MSG_ERROR([Can't find tokyotyrant library]))
fi
AC_MSG_RESULT($enable_tt)
AM_CONDITIONAL(USE_TT, test "$use_tt" = "yes")


####
## libmemcached
##
AC_ARG_WITH([libmemcached],
	AS_HELP_STRING([--with-libmemcached@<:@=DIR@:>@],
				   [the install directory of libmemcached]),
	[libmemcached_path="$withval"], [])
if test "$libmemcached_path" != ""; then
	CXXFLAGS="$CXXFLAGS -I$libmemcached_path/include"
	CFLAGS="$CFLAGS -I$libmemcached_path/include"
	LDFLAGS="$LDFLAGS -L$libmemcached_path/lib"
fi

use_libmemcached="yes"
AC_MSG_CHECKING([if libmemcached is enabled])
AC_ARG_ENABLE(libmemcached,
	AS_HELP_STRING([--disable-libmemcached],
				   [disable libmemcached support]) )
if test "$enable_libmemcached" == "no"; then
	use_libmemcached="no"
else
	AC_CHECK_HEADERS(libmemcached/memcached.h,,
		AC_MSG_ERROR([Can't find libmemcached header]))
	AC_CHECK_LIB(memcached,memcached_create,,
		AC_MSG_ERROR([Can't find libmemcached library]))
fi
AC_MSG_RESULT($enable_libmemcached)
AM_CONDITIONAL(USE_LIBMEMCACHED, test "$use_libmemcached" = "yes")


AC_PROG_LIBTOOL
AM_PROG_AS
AM_PROG_CC_C_O


AC_OUTPUT([
		   src/Makefile
		   Makefile])

